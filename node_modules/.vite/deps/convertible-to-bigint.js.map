{
  "version": 3,
  "sources": ["../../convertible-to-bigint/convertible_to_bigint.mjs"],
  "sourcesContent": ["/**\n * @license\n * MIT License\n * \n * Copyright (c) 2023 Noah Scardina\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Regular expression which can be used to determine whether a string is a valid \n * `BigInt`. If the string will successfully be parsed into a `bigint` primitive \n * using the {@linkcode BigInt()} function, this regex's {@linkcode RegExp.test()} \n * method will return `true`.\n */\nconst BigIntRegExp =\n    /^\\s*(?:0[box])?(?:(?<=^\\s*)[\\+-])?(?:(?<=^\\s*\\+?-?)\\d*|(?<=^\\s*0b\\+?-?)[01]*|(?<=^\\s*0o\\+?-?)[0-7]*|(?<=^\\s*0x\\+?-?)[\\da-fA-F]*)\\s*$/\n\n/**\n * Determines whether a particular value can be successfully converted to a \n * `bigint` using the {@linkcode BigInt()} function. This function will return \n * `true` when any of the following is true:\n * - `value` is a `bigint`.\n * - `value` is a `number` which is a \n * {@linkplain https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger safe integer}.\n * - `value` is a `boolean`.\n * - `value` is a `string` which matches one of the following patterns:\n *      - [ optional whitespace ] [ optional unary `+` or unary `-` ] [ 0 or more decimal digits ] \n * [ optional whitespace ]\n *      - [ optional whitespace ] `0x`[ 0 or more hexadecimal digits (0-9, A-F) ] [ optional whitespace ]\n *      - [ optional whitespace ] `0b`[ 0 or more binary digits (0 or 1) ] [ optional whitespace ]\n *      - [ optional whitespace ] `0o`[ 0 or more octal digits (0-7) ] [ optional whitespace ]\n * @param value value to test.\n * @returns whether `value` can be converted to a `bigint`.\n */\nfunction isConvertibleToBigInt(value) {\n    // A BigInt is automatically convertible to a BigInt\n    if (typeof (value) === 'bigint') {\n        return true\n    }\n\n    // A Number which is a safe integer is convertible to a BigInt. See MDN \n    // link for the exact definition of a safe integer.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger\n    if (typeof (value) === 'number' && Number.isSafeInteger(value)) {\n        return true\n    }\n\n    // Booleans can be converted to BigInt; according to MDN, true is converted \n    // to 1n and false is converted to 0n.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt\n    if (typeof (value) === 'boolean') {\n        return true\n    }\n\n    // Strings can be converted to BigInt if they are like integer literals, as described in the JSDoc \n    // comment for this method.\n    if (typeof (value) === 'string' && BigIntRegExp.test(value)) {\n        return true\n    }\n\n    // If anything else is passed, the BigInt() constructor will return false\n    return false\n}\n\nexport default isConvertibleToBigInt"],
  "mappings": ";;;AA+BA,IAAM,eACF,WAAC,oJAAqI;AAmB1I,SAAS,sBAAsB,OAAO;AAElC,MAAI,OAAQ,UAAW,UAAU;AAC7B,WAAO;AAAA,EACX;AAKA,MAAI,OAAQ,UAAW,YAAY,OAAO,cAAc,KAAK,GAAG;AAC5D,WAAO;AAAA,EACX;AAKA,MAAI,OAAQ,UAAW,WAAW;AAC9B,WAAO;AAAA,EACX;AAIA,MAAI,OAAQ,UAAW,YAAY,aAAa,KAAK,KAAK,GAAG;AACzD,WAAO;AAAA,EACX;AAGA,SAAO;AACX;AAEA,IAAO,gCAAQ;",
  "names": []
}
